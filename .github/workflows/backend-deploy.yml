name: Deploy Backend to AWS EC2 via SSM

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Create .env file for deployment
        working-directory: ./backend
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}" >> .env
          echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> .env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env
          echo "SERPER_API_KEY=${{ secrets.SERPER_API_KEY }}" >> .env
          echo "DEEPGRAM_API_KEY=${{ secrets.NEXT_PUBLIC_DEEPGRAM_API_KEY }}" >> .env

      - name: Zip backend files
        run: zip -r backend-deployment-package.zip backend -x "backend/venv/*" "backend/__pycache__/*" "backend/*.pyc"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Upload deployment package to S3
        run: aws s3 cp backend-deployment-package.zip s3://${{ secrets.S3_BUCKET_NAME }}/

      - name: Run commands on EC2 instance via SSM
        uses: aws-actions/aws-ssm-send-command@v1
        with:
          instance-ids: ${{ secrets.EC2_INSTANCE_ID }}
          command: |
            # Update and install required packages
            sudo apt-get update
            sudo apt-get install -y python3-pip python3-venv unzip nginx nodejs npm awscli

            # Download the deployment package from S3
            aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/backend-deployment-package.zip /home/ubuntu/

            cd /home/ubuntu

            # Remove old directory if it exists
            rm -rf veritas-backend

            # Unzip the new deployment package
            # Note: The zip contains a 'backend' folder, so we unzip it into a folder named veritas-backend
            unzip -o backend-deployment-package.zip 
            mv backend veritas-backend

            # Set up Python virtual environment and install dependencies
            cd veritas-backend
            python3 -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt

            # Run database migrations
            alembic upgrade head

            # Install and use pm2 to manage the application process
            sudo npm install -g pm2
            pm2 stop uvicorn || true
            pm2 delete uvicorn || true
            pm2 start "uvicorn main:app --host 0.0.0.0 --port 8000" --name uvicorn
            pm2 startup
            sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u ubuntu --hp /home/ubuntu
            pm2 save

